pipeline {
    
	agent any
/*	
	tools {
        maven "maven3"
    }
*/	
    environment {
        ARTVERSION = "${env.BUILD_ID}"
        registryCredential = 'ecr:us-east-2:awsscrets'
        appRegistry = '022499021802.dkr.ecr.us-east-2.amazonaws.com/vprofile'
        vprofileRegistry = 'https://022499021802.dkr.ecr.us-east-2.amazonaws.com/vprofile'
        cluster = "vproprod"
        service = "vproappprodsvc"
    }
	
    stages{
        
        stage('BUILD'){
            steps {
                sh 'mvn clean install -DskipTests'
            }
            post {
                success {
                    echo 'Now Archiving...'
                    archiveArtifacts artifacts: '**/target/*.war'
                }
            }
        }

	stage('UNIT TEST'){
            steps {
                sh 'mvn test'
            }
        }

	stage('INTEGRATION TEST'){
            steps {
                sh 'mvn verify -DskipUnitTests'
            }
        }
		
        stage ('CODE ANALYSIS WITH CHECKSTYLE'){
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
            post {
                success {
                    echo 'Generated Analysis Result'
                }
            }
        }


       
        stage('Build App Image') {
            steps {
                script {
                    dockerImage = docker.build( appRegistry + ":$BUILD_NUMBER", "./Docker-files/app/multistage/")
                }
            }
        }
        
      stage('Upload App Image') {
          steps{
            script {
              docker.withRegistry( vprofileRegistry, registryCredential ) {
                dockerImage.push("$BUILD_NUMBER")
                dockerImage.push('latest')
              }
            }
          }
        }

      stages {
        stage('Deploy to Prod ecs') {
          steps {
       		 withAWS(credentials: 'awscreds', region: 'us-west-1') {
    	      		sh 'aws ecs update-service --cluster ${cluster} --service ${service} --force-new-deployment'
       	  }
  	}
      }
    }


     post {
         always {
             echo 'Slack Notifications.'
             slackSend channel: '#jenkinscicd',
                 color: COLOR_MAP[currentBuild.currentResult],
                 message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
         }

     }


}
